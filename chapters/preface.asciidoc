[preface]
Preface
--------

Erlang and Elixir runs on one of the most robust virtual machines ever built. This book
shows you how it works, not only conceptually, but at the level where things actually
happen.

This book is not a style guide. It’s not about syntax or best practices. It won’t teach
you how to structure your GenServers or argue about supervision trees.

What it will do is walk you through the internals of the BEAM. How it schedules
processes. How it allocates memory. How it handles concurrency. How it makes
trade-offs under pressure. The things that matter when your system is live, and
bugs don’t show up in tests.

Toward the end, we’ll get into tracing, profiling, and performance tuning. But
the real goal is to give you the tools to understand what your code is doing at
runtime, and why.

When you know how the system behaves, you can stop guessing.

[[who_is_this_book_for]]
About this book
~~~~~~~~~~~~~~~

This book is for you if:

* You want to understand how Erlang really works.
* You want to tune a BEAM installation for performance or reliability.
* You want to debug crashes and strange behavior inside the VM.
* You want to get the most out of your systems in production.
* Or maybe you just want to build your own runtime, from the ground up.

If you're only here for performance tricks, feel free to skip ahead to the later
chapters. But if you want to understand what’s going on beneath those tools, how
the system actually works, start from the beginning.

The deeper your understanding, the better your decisions.

=== Conventions Used in This Book

The BEAM VM can run on a wide range of systems, from small embedded hardware to
large multi-core servers with terabytes of memory. To optimize the performance
of BEAM applications effectively, you must understand how the VM utilizes memory
and other resources.

Throughout this book, we use diagrams extensively to explain memory structures
and data layouts clearly. Because memory layouts and stack operations can vary
in their representation, here are the conventions we've adopted for diagrams:

* **Memory Diagrams**:
  
  - Memory addresses increase upwards in our diagrams. 
  
  - Low memory addresses appear at the bottom; high addresses at the top. 
  
  - Stacks typically grow downward, starting at higher addresses, with new
  elements pushed onto lower addresses.

* **C-Structure Diagrams**:
  
  - C-structures are represented with their first fields at the top, even though
  these first fields occupy lower memory addresses. 
  
  - This results in diagrams of structures appearing inverted relative to
  general memory-area diagrams.

Be aware that when structures and memory areas appear together in diagrams,
their address representations will be mirrored. Understanding this convention
will help prevent confusion when interpreting visual examples throughout the
book.

You don’t need to be an Erlang programmer to read this book, but you
will need some basic understanding of what Erlang is. This following
section will give you some Erlang background.

=== Erlang

In this section, we will look at some basic Erlang concepts that
are vital to understanding the rest of the book.

Erlang has been called, especially by one of Erlang's creators, Joe
Armstrong, a *concurrency oriented language*. Concurrency is definitely
at the heart of Erlang, and to be able to understand how an Erlang
system works you need to understand the concurrency model of Erlang.

First of all, we need to make a distinction between _concurrency_ and
_parallelism_. In this book, _concurrency_ is the act of breaking down a
broad high level sequence of steps, into one or more independently
executable substeps. With _parallel_ executions, we mean that the
processes actually execute at the exact same time by using several physical
execution units. Parallelism can be achieved on different levels.
Through multiple execution units in the execution pipeline in one core,
in several cores on one CPU, by several CPUs in one machine, or through
several machines, possibly in different locations.

Erlang uses *processes* to achieve concurrency. Conceptually, Erlang
processes are similar to most OS processes: they are isolated memory
spaces (hence, they are not _threads_), they execute in parallel,
and can communicate through signals. In practice, there is a huge
difference in that Erlang processes are much more lightweight than
most OS processes. Many other concurrent programming languages call
their equivalent to Erlang processes _agents_.

Erlang achieves concurrency by interleaving the execution of processes
on the Erlang virtual machine, the BEAM. On a multi-core processor the
BEAM achieves true parallelism by running one scheduler per core and
executing one Erlang process per scheduler. The designer of an Erlang
system can achieve further parallelism by distributing the system over
several computers.

A typical Erlang system (a server or service built in Erlang) consists
of a number of Erlang _applications_, which are independently versioned
units of software, such as a microservice or a library.
Each application is made up of several Erlang _modules_, which are the
fundamental unit of code encapsulation, each module in a separate file
with the extension `.beam` for compiled code that can be loaded, and
`.erl` for source code to be compiled.

Each module contains a number of _functions_, some of which are *exported*
and can be called from other modules, while the rest are internal.
A function takes a number of arguments and returns a value.
The body of a function is made up of _expressions_. Since Erlang is a functional language, it has no statements,
only expressions, which produce a result. In xref:erlang_code_examples[] we can see some examples of
Erlang expressions and functions.

[[erlang_code_examples]]
.Erlang Code Examples
[source,erlang]
----
%% Some Erlang expressions:

true.
1+1.
if (X > Y) -> X; true -> Y end.

%% An Erlang function:

max(X, Y) ->
  if (X > Y) -> X;
     true    -> Y
  end.
----

Erlang has a number of _built in functions_ (or _BIFs_) which are
implemented by the VM. This is either for efficiency reasons, like the
implementation of `+lists:append()+` which could easily have been implemented
in Erlang itself. It could also be to
provide some low level functionality, which would be hard or impossible to
implement in Erlang itself, like `+list_to_atom()+`.

As an end user you can provide your own functions
implemented in C by using the _Native Implemented Functions_ (_NIF_)
interface (see <<NIFs>>).

<<<
=== Acknowledgments

First of all I want to thank the whole OTP team at Ericsson both for maintaining Erlang
and the Erlang runtime system, and also for patiently answering all my questions.
In particular I want to thank Kenneth Lundin, Björn Gustavsson, Lukas Larsson, Rickard Green
and Raimo Niskanen.

I would also like to thank Yoshihiro Tanaka, Roberto Aloi and Dmytro Lytovchenko for
major contributions to the book, and HappiHacking and TubiTV for sponsoring work on
the book.

Finally, a big thank you to everyone who has contributed with edits and fixes:


include::contributors.txt[]

